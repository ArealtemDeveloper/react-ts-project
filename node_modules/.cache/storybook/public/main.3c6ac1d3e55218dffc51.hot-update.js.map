{"version":3,"file":"main.3c6ac1d3e55218dffc51.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AADA;AAFA;AAUA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAOA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;;;AAEA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAIA;;AAfA;AAiBA","sources":["webpack://react_global/./config/storybook/preview.js","webpack://react_global/./src/app/providers/ThemeProvider/index.tsx","webpack://react_global/./src/app/providers/ThemeProvider/lib/useTheme.tsx","webpack://react_global/./src/app/providers/ThemeProvider/ui/ThemeProvider.tsx"],"sourcesContent":["import { addDecorator } from '@storybook/react'\nimport { Theme } from '../../src/app/providers/ThemeProvider'\nimport { StyleDecorator } from '../../src/shared/config/storybook/StyleDecorator/StyleDecorator'\nimport { ThemeDecorator } from '../../src/shared/config/storybook/ThemeDecorator/ThemeDecorator'\n\nexport const parameters = {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n        matchers: {\n            color: /(background|color)$/i,\n            date: /Date$/\n        }\n    }\n}\n\naddDecorator(StyleDecorator)\naddDecorator(ThemeDecorator(Theme.DARK))\n","import ThemeProvider from './ui/ThemeProvider'\r\nimport { useTheme } from './lib/useTheme'\r\nimport { Theme } from './lib/ThemeContext'\r\n\r\nexport { ThemeProvider, useTheme, Theme }\n","import { useContext } from 'react'\r\nimport { Theme, LOCAL_STORAGE_THEME_KEY, ThemeContext } from './ThemeContext'\r\n\r\ninterface UseThemeResult {\r\n    toggleTheme: () => void\r\n    theme: Theme\r\n}\r\n\r\nexport function useTheme (): UseThemeResult {\r\n    const { theme, setTheme } = useContext(ThemeContext)\r\n\r\n    const toggleTheme = () => {\r\n        const newTheme = theme === Theme.DARK ? Theme.LIGHT : Theme.DARK\r\n        setTheme(newTheme)\r\n        localStorage.setItem(LOCAL_STORAGE_THEME_KEY, newTheme)\r\n    }\r\n\r\n    return { theme, toggleTheme }\r\n}\n","import React, { FC, useMemo, useState } from 'react'\r\nimport { ThemeContext, Theme, LOCAL_STORAGE_THEME_KEY } from '../lib/ThemeContext'\r\n\r\nconst ThemeProvider: FC = ({ children }) => {\n    const defaultTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme || Theme.LIGHT\r\n\r\n    const [theme, setTheme] = useState<Theme>(defaultTheme)\r\n\r\n    const defaultProps = useMemo(() => ({\r\n        theme,\r\n        setTheme\r\n    }), [theme])\r\n\r\n    return (\r\n        <ThemeContext.Provider value={defaultProps}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ThemeProvider\n"],"names":[],"sourceRoot":""}